// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  nickname  String   @unique
  password  String   // hashed
  role      Role     @default(HACKER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reports   Report[]
  earnings  Earning[]
  programs  ProgramMember[]
}

enum Role {
  VISITOR
  HACKER
  CLIENT
  CONTRACTOR
  STAFF
  ADMIN
}

model Company {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  country     String
  url         String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  programs    Program[]
}

model Program {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  status      ProgramStatus @default(ACTIVE)
  companyId   Int
  createdAt   DateTime @default(now())

  company     Company   @relation(fields: [companyId], references: [id])
  reports     Report[]
  members     ProgramMember[]
}

enum ProgramStatus {
  ACTIVE
  PAUSED
  CLOSED
}

model ProgramMember {
  id        Int      @id @default(autoincrement())
  userId    Int
  programId Int
  joinedAt  DateTime @default(now())

  user      User    @relation(fields: [userId], references: [id])
  program   Program @relation(fields: [programId], references: [id])
}

model Report {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  severity    Severity
  status      ReportStatus @default(PENDING)
  createdAt   DateTime @default(now())
  
  userId      Int
  programId   Int

  user        User    @relation(fields: [userId], references: [id])
  program     Program @relation(fields: [programId], references: [id])
  triage      Triage?
  earnings    Earning[]
}

model Triage {
  id          Int       @id @default(autoincrement())
  notes       String?
  status      TriageStatus @default(IN_PROGRESS)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  reportId    Int      @unique
  report      Report   @relation(fields: [reportId], references: [id])
}

enum TriageStatus {
  IN_PROGRESS
  COMPLETED
  REJECTED
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ReportStatus {
  PENDING
  IN_TRIAGE
  ACCEPTED
  REJECTED
  PAID
}

model Earning {
  id        Int      @id @default(autoincrement())
  amount    Float
  currency  String   @default("USD")
  status    EarningStatus @default(PENDING)
  createdAt DateTime @default(now())

  userId    Int
  reportId  Int?

  user      User    @relation(fields: [userId], references: [id])
  report    Report? @relation(fields: [reportId], references: [id])
}

enum EarningStatus {
  PENDING
  PAID
  FAILED
}